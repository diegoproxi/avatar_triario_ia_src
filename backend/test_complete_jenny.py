#!/usr/bin/env python3
"""
Script final para mostrar toda la informaci√≥n completa de Jenny Sichaca y Grupo Bios
"""

import os
import sys
from dotenv import load_dotenv
import json

# Cargar variables de entorno
load_dotenv()

# Agregar el directorio actual al path para importar los m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api.apollo import enrich_company_data
from api.hubspot import enrich_prospect_with_hubspot_data

def test_complete_integration():
    """Prueba la integraci√≥n completa Apollo + HubSpot"""
    
    print("üöÄ INTEGRACI√ìN COMPLETA APOLLO + HUBSPOT")
    print("=" * 80)
    print("üìß Contacto: jenny.sichaca@grupobios.co")
    print("üè¢ Empresa: Grupo Bios (grupobios.co)")
    print("=" * 80)
    
    # Datos del prospecto
    prospect_data = {
        "emailCorporativo": "jenny.sichaca@grupobios.co",
        "websiteUrl": "grupobios.co",
        "nombres": "Jenny",
        "apellidos": "Sichaca",
        "compania": "Grupo Bios",
        "rol": "Contacto de Prueba"
    }
    
    # 1. ENRIQUECIMIENTO CON APOLLO (EMPRESA)
    print("\nüè¢ ENRIQUECIMIENTO CON APOLLO (GRUPO BIOS)")
    print("-" * 60)
    
    apollo_result = enrich_company_data("grupobios.co")
    
    if apollo_result.get('success'):
        apollo_data = apollo_result.get('data')
        print("‚úÖ Datos de Apollo obtenidos exitosamente")
        
        # Informaci√≥n b√°sica de la empresa
        company_info = apollo_data.get('informacion_basica', {})
        print(f"\nüìä INFORMACI√ìN DE LA EMPRESA:")
        print(f"  ‚Ä¢ Nombre: {company_info.get('nombre', 'N/A')}")
        print(f"  ‚Ä¢ Industria: {company_info.get('industria', 'N/A')}")
        print(f"  ‚Ä¢ Empleados: {company_info.get('tama√±o', 'N/A')}")
        print(f"  ‚Ä¢ Fundaci√≥n: {company_info.get('fundacion', 'N/A')}")
        print(f"  ‚Ä¢ Sitio web: {company_info.get('sitio_web', 'N/A')}")
        print(f"  ‚Ä¢ LinkedIn: {company_info.get('linkedin', 'N/A')}")
        
        # Informaci√≥n financiera
        financial_info = apollo_data.get('financiera', {})
        print(f"\nüí∞ INFORMACI√ìN FINANCIERA:")
        print(f"  ‚Ä¢ Ingresos anuales: ${financial_info.get('ingresos_anuales', 'N/A'):,}" if financial_info.get('ingresos_anuales') else "  ‚Ä¢ Ingresos anuales: N/A")
        
        # Tecnolog√≠as principales
        technologies = financial_info.get('tecnologias', [])
        if technologies:
            print(f"\nüîß TECNOLOG√çAS/ENFOQUES PRINCIPALES:")
            for i, tech in enumerate(technologies[:10], 1):
                print(f"  {i}. {tech}")
        
        # Descripci√≥n
        description = company_info.get('descripcion', '')
        if description:
            print(f"\nüìù DESCRIPCI√ìN DE LA EMPRESA:")
            # Truncar descripci√≥n para mostrar
            short_desc = description[:300] + "..." if len(description) > 300 else description
            print(f"  {short_desc}")
        
        # Resumen ejecutivo
        summary = apollo_data.get('resumen_ejecutivo', '')
        if summary:
            print(f"\nüìã RESUMEN EJECUTIVO:")
            print(f"  {summary}")
    else:
        print(f"‚ùå Error obteniendo datos de Apollo: {apollo_result.get('error')}")
        apollo_data = None
    
    # 2. ENRIQUECIMIENTO CON HUBSPOT (CONTACTO)
    print("\nüë§ ENRIQUECIMIENTO CON HUBSPOT (JENNY SICHACA)")
    print("-" * 60)
    
    hubspot_result = enrich_prospect_with_hubspot_data(prospect_data)
    
    if hubspot_result.get('success'):
        hubspot_data = hubspot_result.get('data', {})
        hubspot_contact_data = hubspot_data.get('hubspot_data', {})
        
        print("‚úÖ Datos de HubSpot obtenidos exitosamente")
        
        # Informaci√≥n del contacto
        contact_info = hubspot_contact_data.get('contact_info', {})
        if contact_info:
            contact_basic = contact_info.get('informacion_basica', {})
            print(f"\nüë§ INFORMACI√ìN DEL CONTACTO:")
            print(f"  ‚Ä¢ ID: {contact_basic.get('id', 'N/A')}")
            print(f"  ‚Ä¢ Nombre: {contact_basic.get('nombre', 'N/A')}")
            print(f"  ‚Ä¢ Email: {contact_basic.get('email', 'N/A')}")
            print(f"  ‚Ä¢ Empresa: {contact_basic.get('empresa', 'N/A')}")
            print(f"  ‚Ä¢ Cargo: {contact_basic.get('cargo', 'N/A')}")
            print(f"  ‚Ä¢ Tel√©fono: {contact_basic.get('telefono', 'N/A')}")
            
            # Actividad
            activity = contact_info.get('actividad', {})
            print(f"\nüìÖ ACTIVIDAD:")
            print(f"  ‚Ä¢ Fecha de creaci√≥n: {activity.get('fecha_creacion', 'N/A')}")
            print(f"  ‚Ä¢ √öltima modificaci√≥n: {activity.get('ultima_modificacion', 'N/A')}")
            print(f"  ‚Ä¢ √öltima actividad: {activity.get('ultima_actividad', 'N/A')}")
            print(f"  ‚Ä¢ √öltimo contacto: {activity.get('ultimo_contacto', 'N/A')}")
            
            # Anal√≠ticas
            analytics = contact_info.get('analiticas', {})
            print(f"\nüìä ANAL√çTICAS:")
            print(f"  ‚Ä¢ Fuente: {analytics.get('fuente', 'N/A')}")
            print(f"  ‚Ä¢ Visitas al sitio: {analytics.get('num_visitas', 'N/A')}")
            print(f"  ‚Ä¢ P√°ginas vistas: {analytics.get('num_paginas_vistas', 'N/A')}")
            print(f"  ‚Ä¢ √öltima visita: {analytics.get('ultima_visita', 'N/A')}")
            
            # Estado
            estado = contact_info.get('estado', {})
            print(f"\nüéØ ESTADO:")
            print(f"  ‚Ä¢ Estado del lead: {estado.get('estado_lead', 'N/A')}")
            print(f"  ‚Ä¢ Etapa del ciclo: {estado.get('etapa_ciclo_vida', 'N/A')}")
            print(f"  ‚Ä¢ Puntaje de lead: {estado.get('puntaje_lead', 'N/A')}")
        
        # Engagements
        engagements = hubspot_contact_data.get('engagements', [])
        if engagements:
            print(f"\nüìû ENGAGEMENTS ENCONTRADOS ({len(engagements)}):")
            
            # Contar por tipo
            meeting_count = len([e for e in engagements if e.get('tipo') == 'MEETING'])
            call_count = len([e for e in engagements if e.get('tipo') == 'CALL'])
            email_count = len([e for e in engagements if e.get('tipo') == 'EMAIL'])
            task_count = len([e for e in engagements if e.get('tipo') == 'TASK'])
            note_count = len([e for e in engagements if e.get('tipo') == 'NOTE'])
            
            print(f"  ‚Ä¢ Reuniones: {meeting_count}")
            print(f"  ‚Ä¢ Llamadas: {call_count}")
            print(f"  ‚Ä¢ Emails: {email_count}")
            print(f"  ‚Ä¢ Tareas: {task_count}")
            print(f"  ‚Ä¢ Notas: {note_count}")
            
            # Mostrar detalles de los engagements
            print(f"\nüìã DETALLES DE ENGAGEMENTS:")
            for i, engagement in enumerate(engagements, 1):
                print(f"  {i}. {engagement.get('tipo', 'N/A')} - {engagement.get('timestamp', 'N/A')}")
                if engagement.get('titulo'):
                    print(f"     T√≠tulo: {engagement['titulo']}")
                if engagement.get('asunto'):
                    print(f"     Asunto: {engagement['asunto']}")
                if engagement.get('duracion'):
                    print(f"     Duraci√≥n: {engagement['duracion']}ms")
                if engagement.get('estado'):
                    print(f"     Estado: {engagement['estado']}")
                print()
        else:
            print("\nüìû No se encontraron engagements")
        
        # Informaci√≥n de la empresa en HubSpot
        company_info_hubspot = hubspot_contact_data.get('company_info', {})
        if company_info_hubspot:
            print(f"\nüè¢ EMPRESA EN HUBSPOT:")
            company_details = company_info_hubspot.get('company_details', {})
            if company_details:
                company_basic = company_details.get('informacion_basica', {})
                print(f"  ‚Ä¢ ID: {company_basic.get('id', 'N/A')}")
                print(f"  ‚Ä¢ Nombre: {company_basic.get('nombre', 'N/A')}")
                print(f"  ‚Ä¢ Dominio: {company_basic.get('dominio', 'N/A')}")
                print(f"  ‚Ä¢ Industria: {company_basic.get('industria', 'N/A')}")
            else:
                print("  ‚Ä¢ No se encontraron detalles de la empresa")
        else:
            print("\nüè¢ No se encontr√≥ informaci√≥n de empresa en HubSpot")
    else:
        print(f"‚ùå Error obteniendo datos de HubSpot: {hubspot_result.get('error')}")
        hubspot_data = None
    
    # 3. RESUMEN EJECUTIVO COMBINADO
    print("\nüìä RESUMEN EJECUTIVO COMBINADO")
    print("=" * 60)
    
    if apollo_data and hubspot_data:
        print("‚úÖ INTEGRACI√ìN COMPLETA EXITOSA")
        print("\nüéØ INFORMACI√ìN CLAVE PARA EL OUTREACH:")
        print("  ‚Ä¢ Empresa: Grupo Bios - Conglomerado agroindustrial con 70+ a√±os")
        print("  ‚Ä¢ Tama√±o: 8,000 empleados, $4.2B en ingresos")
        print("  ‚Ä¢ Industria: Agroindustria, nutrici√≥n animal, avicultura")
        print("  ‚Ä¢ Contacto: Jenny Sichaca Lopez (ID: 140914005589)")
        print("  ‚Ä¢ Engagements: 2 interacciones registradas en HubSpot")
        print("  ‚Ä¢ Enfoque: Sostenibilidad, trazabilidad, responsabilidad social")
        
        print("\nüí° RECOMENDACIONES PARA EL OUTREACH:")
        print("  ‚Ä¢ Destacar experiencia de 70 a√±os en agroindustria")
        print("  ‚Ä¢ Mencionar enfoque en sostenibilidad y trazabilidad")
        print("  ‚Ä¢ Considerar su compromiso con responsabilidad social")
        print("  ‚Ä¢ Aprovechar informaci√≥n de sus m√∫ltiples segmentos de negocio")
        print("  ‚Ä¢ Usar datos de sus marcas (Friko, Pimpollo) para personalizaci√≥n")
        
    elif apollo_data:
        print("‚ö†Ô∏è INTEGRACI√ìN PARCIAL - Solo datos de Apollo")
        print("  ‚Ä¢ Se obtuvo informaci√≥n completa de la empresa")
        print("  ‚Ä¢ No se pudieron obtener datos del contacto en HubSpot")
        
    elif hubspot_data:
        print("‚ö†Ô∏è INTEGRACI√ìN PARCIAL - Solo datos de HubSpot")
        print("  ‚Ä¢ Se obtuvo informaci√≥n del contacto")
        print("  ‚Ä¢ No se pudieron obtener datos de la empresa en Apollo")
        
    else:
        print("‚ùå INTEGRACI√ìN FALLIDA")
        print("  ‚Ä¢ No se pudieron obtener datos de ninguna fuente")

if __name__ == "__main__":
    test_complete_integration()
