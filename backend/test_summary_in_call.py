#!/usr/bin/env python3
"""
Script de prueba para verificar que el resumen se incluya correctamente en la llamada
"""

import json
import requests
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from storage.conversation_storage import conversation_storage
from agents.conversation_analyzer import conversation_analyzer

def test_summary_in_call():
    """Prueba que el resumen se incluya correctamente en la llamada"""
    
    print("üß™ INICIANDO PRUEBA DEL RESUMEN EN LLAMADA")
    print("=" * 50)
    
    # Datos de prueba
    test_conversation_id = "test-summary-call-123"
    test_hubspot_id = "hubspot-test-summary-456"
    test_prospect_data = {
        "nombres": "Mar√≠a",
        "apellidos": "Gonz√°lez",
        "compania": "Empresa Test Summary",
        "websiteUrl": "www.empresatest.com",
        "emailCorporativo": "maria.gonzalez@empresatest.com",
        "rol": "Directora Comercial"
    }
    
    # Transcripci√≥n que deber√≠a generar un resumen claro
    test_transcript = [
        {
            "role": "assistant",
            "content": "Hola, soy Wayne. Estoy preparado para ayudarte con implementaci√≥n de HubSpot."
        },
        {
            "role": "user",
            "content": "Hola Wayne. Soy Mar√≠a Gonz√°lez, directora comercial de Empresa Test Summary. Tenemos un problema serio: no sabemos exactamente en qu√© est√°n invirtiendo su tiempo nuestros vendedores. Tenemos un CRM b√°sico pero no lo aprovechamos al m√°ximo."
        },
        {
            "role": "assistant",
            "content": "Entiendo perfectamente el desaf√≠o. Es muy com√∫n en empresas en crecimiento. ¬øPodr√≠as contarme m√°s sobre c√≥mo esto afecta los resultados?"
        },
        {
            "role": "user",
            "content": "Nuestros vendedores gastan mucho tiempo en actividades operativas que no generan ventas. Adem√°s, el seguimiento a prospectos es m√≠nimo y estamos perdiendo oportunidades. El nivel de recompra es muy bajo."
        },
        {
            "role": "assistant",
            "content": "Perfecto, esto es exactamente lo que Triario puede ayudarte a resolver. Tenemos procesos y tecnolog√≠a que optimizan el tiempo de tus vendedores."
        },
        {
            "role": "user",
            "content": "Eso suena muy bien. ¬øCu√°l ser√≠a el siguiente paso?"
        }
    ]
    
    print(f"üìù Datos de prueba:")
    print(f"   - conversation_id: {test_conversation_id}")
    print(f"   - hubspot_id: {test_hubspot_id}")
    print(f"   - prospect_data: {json.dumps(test_prospect_data, indent=2)}")
    print()
    
    # 1. Crear mapeo en el almacenamiento
    print("1Ô∏è‚É£ CREANDO MAPEO EN ALMACENAMIENTO")
    print("-" * 40)
    
    storage_success = conversation_storage.store_mapping(
        conversation_id=test_conversation_id,
        hubspot_id=test_hubspot_id,
        prospect_data=test_prospect_data
    )
    
    if storage_success:
        print("‚úÖ Mapeo creado exitosamente")
    else:
        print("‚ùå Error creando mapeo")
        return False
    
    print()
    
    # 2. Probar an√°lisis de conversaci√≥n
    print("2Ô∏è‚É£ PROBANDO AN√ÅLISIS DE CONVERSACI√ìN")
    print("-" * 40)
    
    try:
        analysis = conversation_analyzer.analyze_conversation(test_transcript, test_prospect_data)
        
        print(f"‚úÖ An√°lisis completado:")
        print(f"   - Resumen: {analysis.summary[:100]}...")
        print(f"   - Dolor identificado: {analysis.pain_point}")
        print(f"   - Puntuaci√≥n: {analysis.qualification_score}")
        print(f"   - Insights: {len(analysis.key_insights)} encontrados")
        
        # Verificar que el resumen no est√© vac√≠o
        if not analysis.summary or len(analysis.summary.strip()) < 10:
            print("‚ùå ERROR: El resumen est√° vac√≠o o es muy corto")
            return False
        
        print("‚úÖ Resumen generado correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis: {str(e)}")
        return False
    
    print()
    
    # 3. Probar creaci√≥n de datos de conversaci√≥n
    print("3Ô∏è‚É£ PROBANDO CREACI√ìN DE DATOS DE CONVERSACI√ìN")
    print("-" * 40)
    
    try:
        conversation_data = {
            "title": f"Conversaci√≥n con {test_prospect_data.get('nombres', '')} {test_prospect_data.get('apellidos', '')}",
            "duration": len(test_transcript) * 30,
            "conversation_type": "video_call",
            "ai_agent": "Wayne (SDR Triario)",
            "engagement_score": analysis.qualification_score,
            "company": test_prospect_data.get('compania', ''),
            "job_title": test_prospect_data.get('rol', ''),
            "pain_points": [analysis.pain_point],
            "key_insights": analysis.key_insights,
            "next_steps": analysis.next_steps,
            "summary": analysis.summary,
            "transcript": "\n".join([f"{msg.get('role', 'unknown')}: {msg.get('content', '')}" for msg in test_transcript]),
            "conversation_id": test_conversation_id,
            "follow_up_required": analysis.qualification_score >= 7
        }
        
        print(f"‚úÖ Datos de conversaci√≥n creados:")
        print(f"   - T√≠tulo: {conversation_data['title']}")
        print(f"   - Resumen incluido: {conversation_data['summary'][:50]}...")
        print(f"   - Transcript incluido: {len(conversation_data['transcript'])} caracteres")
        
        # Verificar que el summary est√© presente
        if 'summary' not in conversation_data or not conversation_data['summary']:
            print("‚ùå ERROR: El campo 'summary' no est√° presente en conversation_data")
            return False
        
        print("‚úÖ Campo 'summary' presente en conversation_data")
        
    except Exception as e:
        print(f"‚ùå Error creando datos de conversaci√≥n: {str(e)}")
        return False
    
    print()
    
    # 4. Limpiar datos de prueba
    print("4Ô∏è‚É£ LIMPIANDO DATOS DE PRUEBA")
    print("-" * 40)
    
    delete_success = conversation_storage.delete_mapping(test_conversation_id)
    if delete_success:
        print("‚úÖ Datos de prueba eliminados")
    else:
        print("‚ö†Ô∏è Error eliminando datos de prueba")
    
    print()
    print("üéâ PRUEBA DEL RESUMEN COMPLETADA")
    print("=" * 50)
    print()
    print("üìã VERIFICACIONES REALIZADAS:")
    print("   ‚úÖ Mapeo de conversaci√≥n creado")
    print("   ‚úÖ An√°lisis de conversaci√≥n ejecutado")
    print("   ‚úÖ Resumen generado por IA")
    print("   ‚úÖ Campo 'summary' incluido en conversation_data")
    print("   ‚úÖ Datos listos para env√≠o a HubSpot")
    print()
    print("üí° Si el resumen no aparece en HubSpot, verificar:")
    print("   1. Que la API Key de HubSpot est√© configurada")
    print("   2. Que el campo 'summary' se est√© enviando en metadata")
    print("   3. Los logs del servidor para ver la metadata enviada")
    
    return True

if __name__ == "__main__":
    success = test_summary_in_call()
    sys.exit(0 if success else 1)
