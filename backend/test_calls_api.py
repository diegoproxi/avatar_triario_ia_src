#!/usr/bin/env python3
"""
Script de prueba espec√≠fico para la API de calls v3 de HubSpot
"""

import json
import requests
import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_calls_api():
    """Prueba la creaci√≥n de llamadas usando la API v3 de HubSpot"""
    
    print("üß™ PRUEBA DE LA API DE CALLS V3 DE HUBSPOT")
    print("=" * 50)
    
    # Configuraci√≥n
    HUBSPOT_API_KEY = os.getenv('HUBSPOT_API_KEY')
    HUBSPOT_BASE_URL = 'https://api.hubapi.com'
    
    if not HUBSPOT_API_KEY:
        print("‚ùå HUBSPOT_API_KEY no est√° configurada")
        print("   Configura la variable de entorno antes de ejecutar la prueba")
        return False
    
    # Datos de prueba
    test_contact_id = "test_contact_123"  # Cambiar por un ID real para pruebas
    
    # Datos de la llamada seg√∫n la documentaci√≥n de HubSpot
    # Solo usar propiedades que existen por defecto
    call_data = {
        "properties": {
            "hs_timestamp": int(datetime.now().timestamp() * 1000),  # Timestamp en milisegundos
            "hs_call_title": "Prueba de API Calls v3 - Triario",
            "hs_call_body": """Esta es una llamada de prueba para verificar que la API de calls v3 funciona correctamente con el resumen incluido.

==================================================

TRANSCRIPCI√ìN:
PROSPECTO: Hola, tengo problemas con mi CRM...
AGENTE: Entiendo perfectamente el desaf√≠o...

DOLOR IDENTIFICADO: No se en que invierte el tiempo mis vendedores

INSIGHTS CLAVE:
- Prospecto muy interesado
- Presupuesto disponible
- Tomador de decisi√≥n

PR√ìXIMOS PASOS: Agendar reuni√≥n de calificaci√≥n con especialista comercial

PUNTUACI√ìN DE CALIFICACI√ìN: 8/10

EMPRESA: Empresa Test
CARGO: CEO
ID CONVERSACI√ìN: test_conversation_456""",
            "hs_call_duration": 1800000,  # 30 minutos en milisegundos
            "hs_call_status": "COMPLETED",
            "hs_call_direction": "INBOUND",
            "hs_call_disposition": "f240bbac-87c9-4f6e-bf70-924b57d47db7",  # Connected
            "hs_call_source": "INTEGRATIONS_PLATFORM"
        },
        "associations": [
            {
                "to": {
                    "id": test_contact_id
                },
                "types": [
                    {
                        "associationCategory": "HUBSPOT_DEFINED",
                        "associationTypeId": 194  # call_to_contact
                    }
                ]
            }
        ]
    }
    
    print(f"üìù Datos de prueba:")
    print(f"   - Contact ID: {test_contact_id}")
    print(f"   - API Key configurada: {'‚úÖ' if HUBSPOT_API_KEY else '‚ùå'}")
    print(f"   - URL: {HUBSPOT_BASE_URL}/crm/v3/objects/calls")
    print()
    
    # 1. Probar creaci√≥n de llamada
    print("1Ô∏è‚É£ PROBANDO CREACI√ìN DE LLAMADA")
    print("-" * 40)
    
    try:
        headers = {
            "Authorization": f"Bearer {HUBSPOT_API_KEY}",
            "Content-Type": "application/json"
        }
        
        print(f"üì§ Enviando datos: {json.dumps(call_data, indent=2, ensure_ascii=False)}")
        
        response = requests.post(
            f"{HUBSPOT_BASE_URL}/crm/v3/objects/calls",
            headers=headers,
            json=call_data,
            timeout=30
        )
        
        print(f"üì• Status Code: {response.status_code}")
        print(f"üì• Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        if response.status_code in [200, 201]:
            call_response = response.json()
            call_id = call_response.get('id')
            print(f"‚úÖ Llamada creada exitosamente. ID: {call_id}")
            
            # 2. Verificar que la llamada se cre√≥ correctamente
            print("\n2Ô∏è‚É£ VERIFICANDO LLAMADA CREADA")
            print("-" * 40)
            
            verify_response = requests.get(
                f"{HUBSPOT_BASE_URL}/crm/v3/objects/calls/{call_id}",
                headers=headers,
                params={
                    "properties": "hs_call_title,hs_call_body,hs_call_duration,hs_call_status,hs_call_direction"
                }
            )
            
            if verify_response.status_code == 200:
                call_details = verify_response.json()
                properties = call_details.get('properties', {})
                
                print(f"‚úÖ Llamada verificada exitosamente")
                print(f"   - T√≠tulo: {properties.get('hs_call_title', 'N/A')}")
                print(f"   - Duraci√≥n: {properties.get('hs_call_duration', 'N/A')} ms")
                print(f"   - Estado: {properties.get('hs_call_status', 'N/A')}")
                print(f"   - Direcci√≥n: {properties.get('hs_call_direction', 'N/A')}")
                print(f"   - Resumen completo: {properties.get('hs_call_body', 'N/A')[:200]}...")
                
                # Verificar que el resumen est√© presente
                summary = properties.get('hs_call_body', '')
                if summary and len(summary.strip()) > 10:
                    print("‚úÖ Resumen incluido correctamente en hs_call_body")
                    # Verificar que contenga informaci√≥n estructurada
                    if "TRANSCRIPCI√ìN:" in summary and "DOLOR IDENTIFICADO:" in summary:
                        print("‚úÖ Informaci√≥n estructurada incluida correctamente")
                    else:
                        print("‚ö†Ô∏è Informaci√≥n estructurada no encontrada")
                else:
                    print("‚ùå Resumen no encontrado en hs_call_body")
                
            else:
                print(f"‚ö†Ô∏è Error verificando llamada: {verify_response.status_code}")
            
        else:
            print(f"‚ùå Error creando llamada: {response.status_code}")
            print(f"   Error details: {response.text}")
            return False
    
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n. Verificar conectividad a internet.")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        return False
    
    print()
    print("üéâ PRUEBA DE API DE CALLS V3 COMPLETADA")
    print("=" * 50)
    print()
    print("üìã VERIFICACIONES REALIZADAS:")
    print("   ‚úÖ API Key de HubSpot configurada")
    print("   ‚úÖ Llamada creada usando API v3")
    print("   ‚úÖ Propiedades personalizadas incluidas")
    print("   ‚úÖ Asociaci√≥n con contacto establecida")
    print("   ‚úÖ Resumen incluido en hs_call_body")
    print()
    print("üí° PR√ìXIMOS PASOS:")
    print("   1. Verificar en HubSpot que la llamada aparezca en el contacto")
    print("   2. Revisar que el resumen est√© visible en la llamada")
    print("   3. Confirmar que las propiedades personalizadas se muestren")
    print("   4. Probar el webhook completo con datos reales")
    
    return True

if __name__ == "__main__":
    success = test_calls_api()
    sys.exit(0 if success else 1)
